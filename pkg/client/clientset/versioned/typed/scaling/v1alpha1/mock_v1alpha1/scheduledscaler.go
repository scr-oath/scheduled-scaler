// Code generated by MockGen. DO NOT EDIT.
// Source: scheduledscaler.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "k8s.restdev.com/operators/pkg/apis/scaling/v1alpha1"
	v1alpha10 "k8s.restdev.com/operators/pkg/client/clientset/versioned/typed/scaling/v1alpha1"
	reflect "reflect"
)

// MockScheduledScalersGetter is a mock of ScheduledScalersGetter interface
type MockScheduledScalersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledScalersGetterMockRecorder
}

// MockScheduledScalersGetterMockRecorder is the mock recorder for MockScheduledScalersGetter
type MockScheduledScalersGetterMockRecorder struct {
	mock *MockScheduledScalersGetter
}

// NewMockScheduledScalersGetter creates a new mock instance
func NewMockScheduledScalersGetter(ctrl *gomock.Controller) *MockScheduledScalersGetter {
	mock := &MockScheduledScalersGetter{ctrl: ctrl}
	mock.recorder = &MockScheduledScalersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduledScalersGetter) EXPECT() *MockScheduledScalersGetterMockRecorder {
	return m.recorder
}

// ScheduledScalers mocks base method
func (m *MockScheduledScalersGetter) ScheduledScalers(namespace string) v1alpha10.ScheduledScalerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledScalers", namespace)
	ret0, _ := ret[0].(v1alpha10.ScheduledScalerInterface)
	return ret0
}

// ScheduledScalers indicates an expected call of ScheduledScalers
func (mr *MockScheduledScalersGetterMockRecorder) ScheduledScalers(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledScalers", reflect.TypeOf((*MockScheduledScalersGetter)(nil).ScheduledScalers), namespace)
}

// MockScalingV1alpha1Interface is a mock of ScalingV1alpha1Interface interface
type MockScalingV1alpha1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockScalingV1alpha1InterfaceMockRecorder
}

// MockScalingV1alpha1InterfaceMockRecorder is the mock recorder for MockScalingV1alpha1Interface
type MockScalingV1alpha1InterfaceMockRecorder struct {
	mock *MockScalingV1alpha1Interface
}

// NewMockScalingV1alpha1Interface creates a new mock instance
func NewMockScalingV1alpha1Interface(ctrl *gomock.Controller) *MockScalingV1alpha1Interface {
	mock := &MockScalingV1alpha1Interface{ctrl: ctrl}
	mock.recorder = &MockScalingV1alpha1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScalingV1alpha1Interface) EXPECT() *MockScalingV1alpha1InterfaceMockRecorder {
	return m.recorder
}

// RESTClient mocks base method
func (m *MockScalingV1alpha1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient
func (mr *MockScalingV1alpha1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockScalingV1alpha1Interface)(nil).RESTClient))
}

// ScheduledScalers mocks base method
func (m *MockScalingV1alpha1Interface) ScheduledScalers(namespace string) v1alpha10.ScheduledScalerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledScalers", namespace)
	ret0, _ := ret[0].(v1alpha10.ScheduledScalerInterface)
	return ret0
}

// ScheduledScalers indicates an expected call of ScheduledScalers
func (mr *MockScalingV1alpha1InterfaceMockRecorder) ScheduledScalers(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledScalers", reflect.TypeOf((*MockScalingV1alpha1Interface)(nil).ScheduledScalers), namespace)
}

// MockScheduledScalerInterface is a mock of ScheduledScalerInterface interface
type MockScheduledScalerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledScalerInterfaceMockRecorder
}

// MockScheduledScalerInterfaceMockRecorder is the mock recorder for MockScheduledScalerInterface
type MockScheduledScalerInterfaceMockRecorder struct {
	mock *MockScheduledScalerInterface
}

// NewMockScheduledScalerInterface creates a new mock instance
func NewMockScheduledScalerInterface(ctrl *gomock.Controller) *MockScheduledScalerInterface {
	mock := &MockScheduledScalerInterface{ctrl: ctrl}
	mock.recorder = &MockScheduledScalerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduledScalerInterface) EXPECT() *MockScheduledScalerInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockScheduledScalerInterface) Create(arg0 *v1alpha1.ScheduledScaler) (*v1alpha1.ScheduledScaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v1alpha1.ScheduledScaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockScheduledScalerInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScheduledScalerInterface)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockScheduledScalerInterface) Update(arg0 *v1alpha1.ScheduledScaler) (*v1alpha1.ScheduledScaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1alpha1.ScheduledScaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockScheduledScalerInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScheduledScalerInterface)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockScheduledScalerInterface) Delete(name string, options *v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockScheduledScalerInterfaceMockRecorder) Delete(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScheduledScalerInterface)(nil).Delete), name, options)
}

// DeleteCollection mocks base method
func (m *MockScheduledScalerInterface) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", options, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockScheduledScalerInterfaceMockRecorder) DeleteCollection(options, listOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockScheduledScalerInterface)(nil).DeleteCollection), options, listOptions)
}

// Get mocks base method
func (m *MockScheduledScalerInterface) Get(name string, options v1.GetOptions) (*v1alpha1.ScheduledScaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, options)
	ret0, _ := ret[0].(*v1alpha1.ScheduledScaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockScheduledScalerInterfaceMockRecorder) Get(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScheduledScalerInterface)(nil).Get), name, options)
}

// List mocks base method
func (m *MockScheduledScalerInterface) List(opts v1.ListOptions) (*v1alpha1.ScheduledScalerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v1alpha1.ScheduledScalerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockScheduledScalerInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScheduledScalerInterface)(nil).List), opts)
}

// Watch mocks base method
func (m *MockScheduledScalerInterface) Watch(opts v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockScheduledScalerInterfaceMockRecorder) Watch(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockScheduledScalerInterface)(nil).Watch), opts)
}

// Patch mocks base method
func (m *MockScheduledScalerInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.ScheduledScaler, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, pt, data}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ScheduledScaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockScheduledScalerInterfaceMockRecorder) Patch(name, pt, data interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, pt, data}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockScheduledScalerInterface)(nil).Patch), varargs...)
}
