// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package mock_externalversions is a generated GoMock package.
package mock_externalversions

import (
	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
	externalversions "k8s.restdev.com/operators/pkg/client/informers/externalversions"
	internalinterfaces "k8s.restdev.com/operators/pkg/client/informers/externalversions/internalinterfaces"
	scaling "k8s.restdev.com/operators/pkg/client/informers/externalversions/scaling"
	reflect "reflect"
)

// MockSharedInformerFactory is a mock of SharedInformerFactory interface
type MockSharedInformerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSharedInformerFactoryMockRecorder
}

// MockSharedInformerFactoryMockRecorder is the mock recorder for MockSharedInformerFactory
type MockSharedInformerFactoryMockRecorder struct {
	mock *MockSharedInformerFactory
}

// NewMockSharedInformerFactory creates a new mock instance
func NewMockSharedInformerFactory(ctrl *gomock.Controller) *MockSharedInformerFactory {
	mock := &MockSharedInformerFactory{ctrl: ctrl}
	mock.recorder = &MockSharedInformerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSharedInformerFactory) EXPECT() *MockSharedInformerFactoryMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockSharedInformerFactory) Start(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", stopCh)
}

// Start indicates an expected call of Start
func (mr *MockSharedInformerFactoryMockRecorder) Start(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSharedInformerFactory)(nil).Start), stopCh)
}

// InformerFor mocks base method
func (m *MockSharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InformerFor", obj, newFunc)
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// InformerFor indicates an expected call of InformerFor
func (mr *MockSharedInformerFactoryMockRecorder) InformerFor(obj, newFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformerFor", reflect.TypeOf((*MockSharedInformerFactory)(nil).InformerFor), obj, newFunc)
}

// ForResource mocks base method
func (m *MockSharedInformerFactory) ForResource(resource schema.GroupVersionResource) (externalversions.GenericInformer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForResource", resource)
	ret0, _ := ret[0].(externalversions.GenericInformer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForResource indicates an expected call of ForResource
func (mr *MockSharedInformerFactoryMockRecorder) ForResource(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForResource", reflect.TypeOf((*MockSharedInformerFactory)(nil).ForResource), resource)
}

// WaitForCacheSync mocks base method
func (m *MockSharedInformerFactory) WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCacheSync", stopCh)
	ret0, _ := ret[0].(map[reflect.Type]bool)
	return ret0
}

// WaitForCacheSync indicates an expected call of WaitForCacheSync
func (mr *MockSharedInformerFactoryMockRecorder) WaitForCacheSync(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCacheSync", reflect.TypeOf((*MockSharedInformerFactory)(nil).WaitForCacheSync), stopCh)
}

// Scaling mocks base method
func (m *MockSharedInformerFactory) Scaling() scaling.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scaling")
	ret0, _ := ret[0].(scaling.Interface)
	return ret0
}

// Scaling indicates an expected call of Scaling
func (mr *MockSharedInformerFactoryMockRecorder) Scaling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scaling", reflect.TypeOf((*MockSharedInformerFactory)(nil).Scaling))
}
