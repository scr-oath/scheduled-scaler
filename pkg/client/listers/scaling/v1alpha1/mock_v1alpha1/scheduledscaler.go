// Code generated by MockGen. DO NOT EDIT.
// Source: scheduledscaler.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	gomock "github.com/golang/mock/gomock"
	labels "k8s.io/apimachinery/pkg/labels"
	v1alpha1 "k8s.restdev.com/operators/pkg/apis/scaling/v1alpha1"
	v1alpha10 "k8s.restdev.com/operators/pkg/client/listers/scaling/v1alpha1"
	reflect "reflect"
)

// MockScheduledScalerLister is a mock of ScheduledScalerLister interface
type MockScheduledScalerLister struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledScalerListerMockRecorder
}

// MockScheduledScalerListerMockRecorder is the mock recorder for MockScheduledScalerLister
type MockScheduledScalerListerMockRecorder struct {
	mock *MockScheduledScalerLister
}

// NewMockScheduledScalerLister creates a new mock instance
func NewMockScheduledScalerLister(ctrl *gomock.Controller) *MockScheduledScalerLister {
	mock := &MockScheduledScalerLister{ctrl: ctrl}
	mock.recorder = &MockScheduledScalerListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduledScalerLister) EXPECT() *MockScheduledScalerListerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockScheduledScalerLister) List(selector labels.Selector) ([]*v1alpha1.ScheduledScaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1alpha1.ScheduledScaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockScheduledScalerListerMockRecorder) List(selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScheduledScalerLister)(nil).List), selector)
}

// ScheduledScalers mocks base method
func (m *MockScheduledScalerLister) ScheduledScalers(namespace string) v1alpha10.ScheduledScalerNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledScalers", namespace)
	ret0, _ := ret[0].(v1alpha10.ScheduledScalerNamespaceLister)
	return ret0
}

// ScheduledScalers indicates an expected call of ScheduledScalers
func (mr *MockScheduledScalerListerMockRecorder) ScheduledScalers(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledScalers", reflect.TypeOf((*MockScheduledScalerLister)(nil).ScheduledScalers), namespace)
}

// MockScheduledScalerNamespaceLister is a mock of ScheduledScalerNamespaceLister interface
type MockScheduledScalerNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockScheduledScalerNamespaceListerMockRecorder
}

// MockScheduledScalerNamespaceListerMockRecorder is the mock recorder for MockScheduledScalerNamespaceLister
type MockScheduledScalerNamespaceListerMockRecorder struct {
	mock *MockScheduledScalerNamespaceLister
}

// NewMockScheduledScalerNamespaceLister creates a new mock instance
func NewMockScheduledScalerNamespaceLister(ctrl *gomock.Controller) *MockScheduledScalerNamespaceLister {
	mock := &MockScheduledScalerNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockScheduledScalerNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduledScalerNamespaceLister) EXPECT() *MockScheduledScalerNamespaceListerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockScheduledScalerNamespaceLister) List(selector labels.Selector) ([]*v1alpha1.ScheduledScaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1alpha1.ScheduledScaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockScheduledScalerNamespaceListerMockRecorder) List(selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScheduledScalerNamespaceLister)(nil).List), selector)
}

// Get mocks base method
func (m *MockScheduledScalerNamespaceLister) Get(name string) (*v1alpha1.ScheduledScaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1alpha1.ScheduledScaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockScheduledScalerNamespaceListerMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScheduledScalerNamespaceLister)(nil).Get), name)
}
